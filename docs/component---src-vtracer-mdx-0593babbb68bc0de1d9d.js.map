{"version":3,"sources":["webpack:///../src/vtracer.mdx"],"names":["_frontmatter","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","target","style","width","src","text","height","invSrc","textAlign","isMDXComponent"],"mappings":"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","file":"component---src-vtracer-mdx-0593babbb68bc0de1d9d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/chris/visioncortex.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Figure } from './components/Figure';\nimport { InlineEquation } from './components/InlineEquation';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"vtracer\"\n    }}>{`VTracer`}</h1>\n    <p>{`Researcher: `}\n      <a {...{\n        \"href\": \"//github.com/shpun817\",\n        \"parentName\": \"p\"\n      }}>{`Sanford Pun`}</a>\n      {` | Supervisor: `}\n      <a {...{\n        \"href\": \"//github.com/tyt2y3\",\n        \"parentName\": \"p\"\n      }}>{`Chris Tsang`}</a>\n      {` | Published: 2020-11-01`}</p>\n    <hr />\n    <p>{`VTracer is a utility to convert raster images into vector graphics. Try the `}\n      <a href=\"//www.visioncortex.org/vtracer/\" target=\"_blank\">{`Demo Web App`}</a>\n      {`.`}</p>\n    <img style={{\n      width: 100 + '%'\n    }} src={'/public/images/vtracer-screenshot.png'} />\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`Graphic by sunshine-91 via `}\n        <a {...{\n          \"href\": \"https://www.vecteezy.com/vector-art/172177-gum-tree-vector\",\n          \"parentName\": \"p\"\n        }}>{`Vecteezy`}</a></p>\n\n    </blockquote>\n    <p>{`The input image is first clustered by `}\n      <a {...{\n        \"href\": \"/impression-docs\",\n        \"parentName\": \"p\"\n      }}>{`Hierarchical Clustering`}</a>\n      {`, and each of the output clusters are traced into vector.`}</p>\n    <p>{`The algorithm of vector tracing involves 3 main stages:`}</p>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`Convert pixels into path`}</p>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`Simplify the path into polygon`}</p>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`Smoothen the polygon and approximate it with a curve-fitter`}</p>\n\n      </li>\n\n    </ol>\n    <h2 {...{\n      \"id\": \"path-walking\"\n    }}>{`Path Walking`}</h2>\n    <p>{`VTracer first obtains the raw paths of pixel clusters. A walker is used to trace the outlines of every cluster after building an image tree. The walker would combine consecutive steps in the same direction.`}</p>\n    <Figure src=\"vtracer/WalkerOptim.svg\" text=\"2 results of path-walking. Left: Naïve, Unoptimized walker. Right: Optimized walker.\" mdxType=\"Figure\" />\n    <Figure src=\"vtracer/PipelineShowcase/Pixel.png\" text=\"Raw pixelated polygon\" height=\"200px\" mdxType=\"Figure\" />\n    <h2 {...{\n      \"id\": \"path-simplification\"\n    }}>{`Path Simplification`}</h2>\n    <p>{`Path simplification consists of 2 steps:`}</p>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`Remove staircases`}</p>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`Simplify by limiting subpath penalties`}</p>\n\n      </li>\n\n    </ol>\n    <h3 {...{\n      \"id\": \"staircase-removal\"\n    }}>{`Staircase Removal`}</h3>\n    <p>{`From the previous stage, we have obtained a path whose consecutive edges must have different directions, i.e. the shape is represented by the minimum number of edges with 100% fidelity. However, to represent slant lines and curves in raster graphics, “jaggies” (or pixel staircases) inevitably occur. In this step, we aim at removing these artifacts.`}</p>\n    <p>{`To replace a staircase with a straight line (hence “removing” it), one may adopt an outset (“additive”) or inset (“subtractive”) approach. Both approaches are justifiable in difference contexts, so the key is to maintain consistency in the same shape. In order to determine which points to keep, we make use of the `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`signed area`}</em>\n      {`.`}</p>\n    <Figure src=\"vtracer/Staircase.svg\" mdxType=\"Figure\" />\n    <p>{`The signed area of a right triangle is a metric used to determine whether the vertices are arranged clockwise or anti-clockwise geometrically. With this information, we can determine which points to keep on the staircase.`}</p>\n    <p>{`For each point on the staircase, we calculate the signed area of the triangle formed by the previous point, the current point, and the next point on the path. The decision of whether the current point should be kept is then made by comparing the sign of the signed area and the clockwise-ness of the original path.`}</p>\n    <Figure src=\"vtracer/SignedArea.svg\" text=\"Two examples of signed area. If outset(inset) is chosen, B(B’) is kept and B’(B) is discarded.\" mdxType=\"Figure\" />\n    <h3 {...{\n      \"id\": \"simplify-by-limiting-penalties\"\n    }}>{`Simplify by Limiting penalties`}</h3>\n    <p>{`The path can be further simplified by evaluating the `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`penalty`}</em>\n      {` from replacing a subpath with one long edge from the first to the last point.`}</p>\n    <Figure src=\"vtracer/RemoveWobble.svg\" text=\"Left: Path with wobbles. Right: Path approximated by red line, removing wobbles\" mdxType=\"Figure\" />\n    <p>{`Given a subpath, we would like to determine if a line drawn from the first point to the last can approximate the whole subpath with high fidelity. The idea is to make sure that all points in the subpath are close enough to the approximating line. To avoid all the complicated coordinate geometry, we can simply evaluate the areas of triangles formed by the first point, the last point, and each in-between point.`}</p>\n    <p>{`Let ΔABC be one such triangle, with A and C being the first and last points of the subpath respectively, and B being any in-between point. Let h and b be the height and the base (length of AC) respectively. VTracer models the penalty of ΔABC as `}\n      <InlineEquation src={'/public/vtracer/PenaltyEquation.svg'} invSrc={'/public/vtracer/PenaltyEquation_inv.svg'} mdxType=\"InlineEquation\" />\n      {`, as the area of ΔABC and b can be obtained by simple geometry. It is crucial for the penalty to be directly proportional to h and b.`}</p>\n    <p>{`Once the penalty is clearly defined, the procedure of simplification is straightforward. VTracer greedily extends a subpath until the maximum penalty along it exceeds a specific tolerance, then all edges in the subpath are replaced by one line from the first to the second last point (or equivalently, remove in-between points from the path). After the replacement, the same process is performed starting from the next point in the path. When the last subpath is extended to the last point in the whole path, the simplification stage concludes.`}</p>\n    <Figure src=\"vtracer/Penalty.svg\" mdxType=\"Figure\" />\n    <h2 {...{\n      \"id\": \"path-smoothing\"\n    }}>{`Path Smoothing`}</h2>\n    <Figure src=\"vtracer/PipelineShowcase/Original.png\" text=\"Sample Simplified 'S' Shape\" height=\"200px\" mdxType=\"Figure\" />\n    <p>{`What we have now is a simplified polygon with high fidelity. However, if we feed the path to the curve fitter as is, the curves will approximate the shape poorly. This is because the curves are underdetermined given the small number of points. In order to generate points that lie on our desired shape, subdivision smoothing is performed.`}</p>\n    <h3 {...{\n      \"id\": \"4-point-scheme\"\n    }}>{`4-Point Scheme`}</h3>\n    <p>{`VTracer adapts from the `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`4-Point Scheme`}</em>\n      {` subdivision algorithm, which is an interpolating smoothing method. The problem of the 4-Point Scheme is that all vertices would be smoothed into round corners, which, from our point of view, is a loss of fidelity.`}</p>\n    <Figure src=\"vtracer/4-PointScheme.svg\" text=\"4-Point Scheme performed on segment A₁A₂\" mdxType=\"Figure\" />\n    <Figure src=\"vtracer/4-PointSchemeProblem.svg\" text=\"If A2 is a corner, the 4-Point Scheme smooths it out iteratively.\" mdxType=\"Figure\" />\n    <h3 {...{\n      \"id\": \"finding-corners\"\n    }}>{`Finding corners`}</h3>\n    <p>{`To preserve corners, we first have to locate them. VTracer finds corners by checking the `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`angle difference`}</em>\n      {` at each vertex. If the absolute angle difference exceeds a certain threshold, the vertex is considered to be a corner.`}</p>\n    <Figure src=\"vtracer/Corner.svg\" mdxType=\"Figure\" />\n    <h6 style={{\n      textAlign: 'center'\n    }}>\n      <p>{`Angle difference from A to B is small => a is not a corner\n`}\n        <br />\n        {`\nAngle difference from B to C is large => b is a corner`}</p>\n    </h6>\n    <h3 {...{\n      \"id\": \"corner-preserving-4-point-scheme\"\n    }}>{`Corner-Preserving 4-Point Scheme`}</h3>\n    <p>{`In the original 4-Point Scheme, 2 adjacent points are always used to generate the new point for each segment. In our adapted version, we do not take the adjacent point for corners, but instead we take the corners themselves. For segments whose points are both corners, we simply ignore them.`}</p>\n    <Figure src=\"vtracer/3-PointScheme.svg\" mdxType=\"Figure\" />\n    <p>{`Since A₂ is a corner, the smoothing procedure does not take the adjacent point as B₂. As a result, the corner will be (approximately) preserved after smoothing, even after iterations.`}</p>\n    <p>{`VTracer applies a threshold on the length of each segment during subdivision smoothing, so that the result will not be over-dense. This threshold should be decided carefully (mainly based on the resolution of image), otherwise the resulting path will be a poor approximation.`}</p>\n    <p>{`Shown below are examples smoothed with no iteration:`}</p>\n    <Figure src=\"vtracer/PipelineShowcase/LengthThresholds.svg\" text=\"Length Thresholds 3.5/5.0/7.5\" height=\"200px\" mdxType=\"Figure\" />\n    <p>{`Introducing iterations, you can see more points are generated by subdivision:`}</p>\n    <Figure src=\"vtracer/PipelineShowcase/MaxIterations.svg\" text=\"Iterations 0/1/2\" height=\"200px\" mdxType=\"Figure\" />\n    <p>{`VTracer's implementation defaults to 10 iterations, and exit early when no further smoothing can be done on the path.`}</p>\n    <h2 {...{\n      \"id\": \"curve-fitting\"\n    }}>{`Curve Fitting`}</h2>\n    <p>{`The path is now populated with nicely positioned and sufficiently dense points that faithfully represent our desired shape. Before feeding it to a (Bezier) curve-fitter, VTracer determines where to cut curves (splice points).`}</p>\n    <h3 {...{\n      \"id\": \"finding-splice-points\"\n    }}>{`Finding Splice Points`}</h3>\n    <p>{`To define a splice point, we make use of the `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`signed angle differences`}</em>\n      {`. Interpreting each edge along the path as vectors, we can define the signed angle difference from edge eᵢ to eᵢ₊₁ as the 2D angle of rotation θ ∊ (-π, π] required to rotate eᵢ to the same direction as eᵢ₊₁ (assume positive θ in clockwise direction).`}</p>\n    <p>{`It is sufficient for a vertex to be a splice point if it passes one of two tests: `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`point of inflection test`}</em>\n      {`and `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`angle displacement test`}</em>\n      {`.`}</p>\n    <p>{`Points of inflection can be found by tracking the signs of angle differences along the path. When the concavity of the path changes at a certain point, the sign of the signed angle difference also changes at that point.`}</p>\n    <Figure src=\"vtracer/PointOfInflection.svg\" mdxType=\"Figure\" />\n    <h6 style={{\n      textAlign: 'center'\n    }}>\n      <p>{`As the sign of angle difference changes at point P, P is a point of inflection and hence a splice point.\n`}\n        <br />\n        {`\nTherefore, we cut (A..B) into (A..P) and (P..B).`}</p>\n    </h6>\n    <p>{`Angle displacement at a point is defined as the signed angle differences accumulated from the previous splice point (exclusive) to the current point (inclusive). If the absolute value of angle displacement at a certain point exceeds a specific threshold, that point is a splice point. The smaller the threshold, the more curves are cut, and the resulting spline is more accurate.`}</p>\n    <Figure src=\"vtracer/AngleDisplacement.svg\" text=\"Angle Displacements shown along a path.\" mdxType=\"Figure\" />\n    <p>{`Once all splice points are found, VTracer feeds all subpaths between every consecutive pair of splice points into the curve-fitter.`}</p>\n    <p>{`If the smoothed path from the previous step is fed into the curve-fitter, we get a spline like the following:`}</p>\n    <Figure src=\"vtracer/PipelineShowcase/Curve-fitted.png\" text=\"Final output\" height=\"200px\" mdxType=\"Figure\" />\n    <h2 {...{\n      \"id\": \"vs-potrace\"\n    }}>{`vs Potrace`}</h2>\n    <h3 {...{\n      \"id\": \"fidelity\"\n    }}>{`Fidelity`}</h3>\n    <p><a {...{\n        \"href\": \"http://potrace.sourceforge.net/\",\n        \"parentName\": \"p\"\n      }}>{`Potrace`}</a>\n      {` is a popular bitmap tracing tool that also transforms bitmaps into vector graphics. Being able to produce high-quality output for low-resolution images, Potrace traces images by finding global optimal under certain assumptions. VTracer favours fidelity over simplification. Potrace and VTracer produce different results especially on small objects.`}</p>\n    <Figure src=\"vtracer/VSPotraceCorner.svg\" mdxType=\"Figure\" />\n    <h6 style={{\n      textAlign: 'center'\n    }}>\n      <p>{`Illustration of how assumptions affect tracing.\n`}\n        <br />\n        {`\nLeft: Original input.\n`}\n        <br />\n        {`\nMiddle: Possible shape interpretation with the assumption that ambiguous “corners” in the original input are sharp corners.\n`}\n        <br />\n        {`Right: Possible shape interpretation with no assumptions: “corners” in the original image are represented by curves or round corners.`}</p>\n    </h6>\n    <h3 {...{\n      \"id\": \"efficiency\"\n    }}>{`Efficiency`}</h3>\n    <p>{`Potrace finds the global optimal way of tracing a shape, meaning it approximates parts using information from the entire shape, which leads to performance issues in high-resolution images. On the other hand, VTracer runs a linear algorithm on each cluster and has lower CPU and memory usage. In fact, we regularly use VTracer to process high resolution scans at 10 megapixels.`}</p>\n    <h2 {...{\n      \"id\": \"vs-adobe-illustrator\"\n    }}>{`vs Adobe Illustrator`}</h2>\n    <p>{`Comparing to Adobe Illustrator's Live Trace, VTracer's output is much more compact thanks to a stacking strategy. VTracer's preprocessing stage utilizes Vision Cortex's image tree algorithm and never produces shapes with holes.`}</p>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}