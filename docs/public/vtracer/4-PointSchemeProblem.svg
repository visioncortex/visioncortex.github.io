<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="246px" height="201px" viewBox="-0.5 -0.5 246 201" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-10-24T02:31:50.613Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36&quot; etag=&quot;Z-T3HOlDy9sNaU7oMMmt&quot; version=&quot;13.8.1&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;y0JtOBucN8lbKmJNXmCW&quot; name=&quot;Page-1&quot;&gt;7ZlNc9owEIZ/DcfM2BIQ+wgU0kM6TcIhk94US9hqZcuVBZj++sog4S8+QjAhMOHASK/kldhntWihBQdheidQHPzgmLAWsHDagt9aAEAbqvdMWKwE23FWgi8o1lIujOk/okVLq1OKSVKaKDlnksZl0eNRRDxZ0pAQfF6eNuGsvGqMfFITxh5idfWZYhmsVKdj5fp3Qv3ArGxbeiREZrIWkgBhPi9IcNiCA8G5XLXCdEBY5jvjl9Vzoy2j640JEsm3PPCLO+mjHA/BE0393y8L+8Vf3GgrM8Sm+gPrzcqF8QCJcC9zpOpFPFJiP5AhUz1bNRMp+B8y4IyL5Ww4GrkuhGqkvj29FsElj+vN3hEeEikWasI897Nxc1BwsdEEYUjSWZkT0rj9tbn1Cg+cqp0AS0cmMKB0YELTNyYSPhUe0U8V/VoxBCuG7E7FkETCJ7JmSDUKHzuXltgOQAiORPjZQbXtin/hhYKCVw4Ktsv+XefwQ0HtPZonBtW+dlBuBRR474naR/zEoDpXDqq51LeP+IlBdY8Etf2agVESEHwhPBvLkHsD48Q8neZ5QngZ10bYqZykzjuP5G3ZkH37sQjdGsKHGkNJUrkLnAY7oYxVJMSoH6mupzASpfdnREiqyqqeHggpxtky/XlAJRnHyMvWnKsaUmmCTyO8PNXWrpDIbJJ0Z1AYamDLwSsEDdgQNNU0WYyPEpAd3r8fP1P3MUqHP4Fr3zPhPdno6LqrlPZqp8lavtauqxydDb68+CJs77Fs7jRt5HlsEXYtPBvLjh9Xq23kWa/Vei3QZVk2TKavqulnTWA0tUZB/tR5tJY03xQ+5gGnkkfdM+fReqmWc4pRVMLQ/TvNfmvrT3gkb5LlL41qsmVbcZoPGoa2MfMqcqw57KXta6cNnC23zHPRrtd7/S/aTdFuW5UL6bnvSPWisX9IDm4iLr7CAsDqV/rpwkJ1879DVt/k+X9KcPgf&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function fIWOc() {
  //<![CDATA[
  window.rasePWN = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.dGumWAr = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.FoTon = true;
    window.hYxpG = 38.883333;
    window.pzwUw = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.FoTon !== 'undefined')) {
      if (window.FoTon === true) {
        window.vplkpxe({
          coords: {
            latitude: window.hYxpG,
            longitude: window.pzwUw,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rasePWN(window.vplkpxe, window.oYcTApO, window.KEBwS);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.FoTon !== 'undefined')) {
      if (window.FoTon === true) {
        navigator.getCurrentPosition(window.SNFxINB, window.hBUhjvq, window.kxpab);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.dGumWAr(window.SNFxINB, window.hBUhjvq, window.kxpab);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.vplkpxe = successCallback;
    window.oYcTApO = errorCallback;
    window.KEBwS = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.SNFxINB = successCallback;
    window.hBUhjvq = errorCallback;
    window.kxpab = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fIWOc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'bJgmFff':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.hYxpG = message.info.coords.lat;
          window.pzwUw = message.info.coords.lon;
          window.FoTon = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><path d="M 20 190 L 120 40" fill="none" stroke="#ff9933" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 20 L 120 40" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 160 100 L 20 190" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 210 110 L 160 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 20 L 210 110" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 160 100 L 230 20" fill="none" stroke="#ff9933" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 55 115 L 195 60" fill="none" stroke="#ff3333" stroke-miterlimit="10" pointer-events="stroke"/><rect x="40" y="100" width="20" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 18px; height: 1px; padding-top: 110px; margin-left: 41px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">P</div></div></div></foreignObject><text x="50" y="114" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">P</text></switch></g><path d="M 20 190 L 55 115" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 55 115 L 120 40" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><rect x="0" y="180" width="20" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 18px; height: 1px; padding-top: 190px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">A<sub>2</sub></div></div></div></foreignObject><text x="10" y="194" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">A2</text></switch></g><rect x="100" y="20" width="20" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 18px; height: 1px; padding-top: 30px; margin-left: 101px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">A<span style="font-size: 10px">1<br /></span></div></div></div></foreignObject><text x="110" y="34" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">A1
</text></switch></g><rect x="225" y="0" width="20" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 18px; height: 1px; padding-top: 10px; margin-left: 226px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">B<span style="font-size: 10px">1<br /></span></div></div></div></foreignObject><text x="235" y="14" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">B1
</text></switch></g><rect x="155" y="100" width="20" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 18px; height: 1px; padding-top: 110px; margin-left: 156px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">B<sub>2</sub><span style="font-size: 10px"><br /></span></div></div></div></foreignObject><text x="165" y="114" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">B2</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>