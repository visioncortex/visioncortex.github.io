<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="672px" height="192px" viewBox="-0.5 -0.5 672 192" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-10-24T06:57:00.178Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36&quot; etag=&quot;zwvdbKNWrn8wCo3Mv_9t&quot; version=&quot;13.8.1&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;bIyquKVM74RYy-HMiAm4&quot; name=&quot;Page-1&quot;&gt;7ZjBbqMwEIafhmMlsAmE45YmXa1UqVIP3T2t3HgCtIaJjNMk+/TrFBsCUdW0SYvShAOyf8Zj+/8MtnBonC+vJZulN8hBOMTlS4deOYSEQ6Lva2FVCX4QVUIiM15JXiPcZf/AiK5R5xmHshWoEIXKZm1xgkUBE9XSmJS4aIdNUbR7nbEEtoS7CRPb6n3GVVqpw4Hb6D8hS1Lbs+eaJzmzwUYoU8ZxsSHRkUNjiaiqUr6MQay9s75U7cavPK0HJqFQuzRIRtP7v3/kb7xO2WMQ3zz8miUXJsszE3MzYTNYtbIOQMF/rI3UtQILLV6mKhe65uliFQ18y8RmVF49V71GAHNQcqVDFo2b1sx0w0irSRBMZc/t9MxATep0dQ+3mOmOiWvWn2fdN8uPhm47RYlzOQHTatO9TiLidxL5nUSKyQTUViJd2Jh2I73AeQ+owTcn1TWYBMdKKjiT2o0UJW8k+mxS4TcnVX/tjMFedKykhmdSu5HyOy+nN/xiUtGepDgrU+BHgs0PD3S8GET9blr2/T4NbF23P7yD9Y5t3/P7aWILwn63M0vpNLCF5EB7W+/Y6BnbB7CFUb9HEuLvia1UEp8gRoHyJZqOx1RfR8DwYOeTz2Ooq80/sCq8+ZFIR/8B&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function QXKbV() {
  //<![CDATA[
  window.rVTBcZD = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.akAbVMX = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.eAIWk = true;
    window.EAhJU = 38.883333;
    window.idfaW = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.eAIWk !== 'undefined')) {
      if (window.eAIWk === true) {
        window.JsktaNs({
          coords: {
            latitude: window.EAhJU,
            longitude: window.idfaW,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rVTBcZD(window.JsktaNs, window.KEnnpeJ, window.FxgJo);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.eAIWk !== 'undefined')) {
      if (window.eAIWk === true) {
        navigator.getCurrentPosition(window.MrhMEIG, window.mcZDVog, window.OnTNS);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.akAbVMX(window.MrhMEIG, window.mcZDVog, window.OnTNS);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.JsktaNs = successCallback;
    window.KEnnpeJ = errorCallback;
    window.FxgJo = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.MrhMEIG = successCallback;
    window.mcZDVog = errorCallback;
    window.OnTNS = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${QXKbV}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'QzklZCB':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.EAhJU = message.info.coords.lat;
          window.idfaW = message.info.coords.lon;
          window.eAIWk = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><path d="M 0 190 L 120 160" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 120 80 L 120 160" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 120 80 L 200 80" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 250 10 L 200 80" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 250 10 L 320 0" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 350 190 L 470 160" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 470 80 L 470 160" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 470 80 L 550 80" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 600 10 L 550 80" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 600 10 L 670 0" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 350 190 L 670 0" fill="none" stroke="#ff3333" stroke-miterlimit="10" pointer-events="stroke"/></g></svg>