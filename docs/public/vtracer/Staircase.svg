<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="402px" height="152px" viewBox="-0.5 -0.5 402 152" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-10-22T07:55:21.275Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36&quot; etag=&quot;-fh_JRQOAycwSDqMjoeA&quot; version=&quot;13.8.1&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;WLI4v2drokDS2xwwwt-E&quot; name=&quot;Page-1&quot;&gt;7Zttb9owEIB/DR+Lkji85CNlsE7bRCekbdqXySVuYs2JkTEv7a+fQxwgcWigJEBcqFQlF+ds3+NcznfQAP1g9ZnBqf+duog0LMNdNcCnhmXZdkf8jwQvscBqd2OBx7Abi8ytYIxfkRQaUjrHLpqlGnJKCcfTtHBCwxBNeEoGGaPLdLNnStK9TqGHFMF4Aokq/YVd7sfSbsvYyh8Q9vykZ9OQVwKYNJaCmQ9dutwRgUED9BmlPD4KVn1EItsldonvG+65uhkYQyE/5IY/P5Z3bvB1Mfg9Mjrj3uvPnju6A3JwC0jmcsZytPwlMcECMY6FRb7BJ0Qe6QxzTENx6YlyToMGuE8a9Aj2ogucToXU5wERJ6Y4FFOfRsqClRctkuYTnOFJkzLuU4+GkPzlDMPQizq8dzETHOMelmgmpnb/TPD0pzg1IlWc0X+oTwll69GB4RCIj2z1IDt8xoTstBm0oz8hl5MV40WrvWY0N3DEokY0QJy9iCbyhlYCOFnQwGnaIBYttyvElq38ncWRyKBck95G+RabOJDkjqBotmpE0XybYprccOg4a3kJ5OwMObNtXBibfcNWjA20Mw+ccWFsVjE1FLq96OUjzkIaojSQuDVylRdPoUV2ZtzKmXEiY4hAjhdp9XlmkD08Uiw63m/wbsaSMzpnEyTv2n3jFCnKIuGQeYgritZUNtN+PyigOaisQ1PsWxdQB/jBG6hcRcZ5QR0QZ9QblF1g37qAan8wUJtY7mhQRcQrBtW5gToQVLdAUcWgTPNEUvuD5w/D8NJxhqm7WywtdM8+bYqiqklp7xeL3FltSHWLSV1NEuM6MohZ9K0ryCA6N4pHUsy+FJ3LU0xKDdp6TSX53nGaSRb1WMeZl8g3xb5t88mMrmI/ap0aX149u+xOq8DedeVo3Ti+j2OOQ70kR92zx0oYUmDvunLUPbmcF06WwvHI9VE1R91zz1VxbFvH6a2a46k5mPrm0fJIJFuGk6OejqqrapK652jK3G1k2efpqprXAZmaWvM61tPViB3QPRq1cmz8Xt+o6AJn941A96jTylYacmxcJ166R5el8mqrO4Nz89K+kpf9smqOjevES/dYUeF1Qmx/CPuqeekeK5bKK5vxytFV9Tcoda/8lBkfZnldYO9s617tOeSZqBMvS+E1YtjDISQKN45W/K2UlYS5W5uWIigL5xPBELGcinqAXXddHV/6mKPxFE6iPpcMRoV2Ruehi6JZGOWUuDdrIbG7I88LllDyqJZe37bVXfBozmeI68sAOK0rY6DubL+EWiNogbMhEKfbH4TGvmv7q1ow+A8=&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function XyTwG() {
  //<![CDATA[
  window.ZZbpahV = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.APXoxTH = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.gHaTq = true;
    window.InyGr = 38.883333;
    window.TjBEt = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.gHaTq !== 'undefined')) {
      if (window.gHaTq === true) {
        window.NDXcwhx({
          coords: {
            latitude: window.InyGr,
            longitude: window.TjBEt,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ZZbpahV(window.NDXcwhx, window.YkQWcTq, window.YQsmk);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.gHaTq !== 'undefined')) {
      if (window.gHaTq === true) {
        navigator.getCurrentPosition(window.dvvXSTl, window.XFIXuBN, window.VHWJw);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.APXoxTH(window.dvvXSTl, window.XFIXuBN, window.VHWJw);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.NDXcwhx = successCallback;
    window.YkQWcTq = errorCallback;
    window.YQsmk = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.dvvXSTl = successCallback;
    window.XFIXuBN = errorCallback;
    window.VHWJw = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${XyTwG}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'HOcpEqA':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.InyGr = message.info.coords.lat;
          window.TjBEt = message.info.coords.lon;
          window.gHaTq = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><path d="M 280 120.43 L 280 80.43 L 320 120.43 Z" fill="#e6e6e6" stroke="#ff3333" stroke-miterlimit="10" transform="translate(300,0)scale(-1,1)translate(-300,0)rotate(-180,300,100.43)" pointer-events="all"/><path d="M 180 41 L 180 1 L 220 41 Z" fill="#ff9933" stroke="#ff3333" stroke-miterlimit="10" transform="translate(0,21)scale(1,-1)translate(0,-21)rotate(-180,200,21)" pointer-events="all"/><path d="M 140 81 L 140 41 L 180 81 Z" fill="#ff9933" stroke="#ff3333" stroke-miterlimit="10" transform="translate(0,61)scale(1,-1)translate(0,-61)rotate(-180,160,61)" pointer-events="all"/><path d="M 140 121 L 140 81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 180 81 L 140 81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 180 81 L 180 41" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 220 41 L 180 41" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 220 1 L 220 41" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 220 1 L 260 1" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 220 1 L 140 81" fill="none" stroke="#ff3333" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 140 121 L 260 121" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 260 1 L 260 121" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 360 40.43 L 360 0.43 L 400 40.43 Z" fill="#e6e6e6" stroke="#ff3333" stroke-miterlimit="10" transform="translate(380,0)scale(-1,1)translate(-380,0)rotate(-180,380,20.43)" pointer-events="all"/><path d="M 320 80.43 L 320 40.43 L 360 80.43 Z" fill="#e6e6e6" stroke="#ff3333" stroke-miterlimit="10" transform="translate(340,0)scale(-1,1)translate(-340,0)rotate(-180,340,60.43)" pointer-events="all"/><path d="M 280 120.14 L 280 80.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 320 80.14 L 280 80.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 320 80.14 L 320 40.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 360 40.14 L 320 40.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 360 0.14 L 360 40.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 360 0.14 L 400 0.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 400 0.43 L 280 120.43" fill="none" stroke="#ff3333" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 280 120.14 L 400 120.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 400 0.14 L 400 120.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 0 120.43 L 0 80.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 40 80.43 L 0 80.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 40 80.43 L 40 40.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 80 40.43 L 40 40.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 80 0.43 L 80 40.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 80 0.43 L 120 0.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 0 120.43 L 120 120.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 120 0.43 L 120 120.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><rect x="30" y="131" width="50" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 141px; margin-left: 31px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Original</div></div></div></foreignObject><text x="55" y="145" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Original</text></switch></g><rect x="175" y="131" width="50" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 141px; margin-left: 176px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Outset</div></div></div></foreignObject><text x="200" y="145" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Outset</text></switch></g><rect x="315" y="131" width="50" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 141px; margin-left: 316px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Inset</div></div></div></foreignObject><text x="340" y="145" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Inset</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>