<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="371px" height="161px" viewBox="-0.5 -0.5 371 161" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-10-24T02:41:06.251Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36&quot; etag=&quot;dWslwQRII3DHoQntjWv9&quot; version=&quot;13.8.1&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;Fc7FoULSjUks8GOKUWoN&quot; name=&quot;Page-1&quot;&gt;7Zldb9owFIZ/DdJ2sSqJEwKXQD+nVepUaezWjU1i1cSRYwrs188mDsQ2a6Et0EbjAjlvnGPnfY4T2+mA0XRxxWGR3TKEaSfw0KIDzjtBEHR9+a+EZSX4UbcSUk6QljbCPfmDtehpdUYQLo2KgjEqSGGKCctznAhDg5yzuVltwqjZagFT7Aj3CaSuOiZIZJXai7yNfo1JmtUt+54+M4V1ZS2UGURs3pDARQeMOGOiKk0XI0yVd7Uv1XWX/zi77hjHudjlAjy++Yni39/9MEzPb0FRjIaDbzrKE6QzfcO6s2JZO4BzNFBGyqOc5VIcZmJK5ZEvi24ndESMDF91l64wm2LBl7LCfONmbWbWMLLWOKZQkCeTBtRQ03W4dQt3jMieBF6df7GOo9MvAJ4ZomQznmB9VdM9KxAAZiA/tgIJyFMsnECy0LjtjbSCsweooOWgQN/yt/tJQYH/oHYE1bWGZnBcUGHLQb3fo+/EoKK9QCUUliVJTFal4OwRjxhlfHUBuLwE8ifPsAImRKg7k3f5CaDaLMJ3gurbgQ4Mtft2qBa6LYz7/RXjDw/VGql+75VQw8gKFB0Xanx4qGA1dD8B1NB7YYDtPFKjF4b8gaH2HKgX0uGy6kDg/ZKrLsZV6cudWvJI2gVOyIRgpCLnam1GWfI4JyWWZUS4vICw/KuTGgIvxHOPbf0KnhBKLQlSkuYqo2QuYKkPnzAXRC7iBvrElCCkmhnOMyLwvcwx1eZcrlilxtksR1hZ8OwbQMXEi2czqz5rP1vrVGhkHoi3pJ79Ym1mmYF1X4Z9h+GgvfY7r7bAtd+Pjuh+vZfRsH/UYvtBfBZtf2KdDIC7zTFsLwBnFnBy+901MWyv/cA3s389CWvYHwRnRwXgrnUfWgwgtgBsyf/DARj0s8ebDLAS3T2k46vrbDD58eZtVmca7K1+a7+sOe8WA0+2XWQ/jLqxGWLnaXBoB9ptGixNhctGtUJVKPfpsLGtLgtVxNfOsbfmR/De+bHe3/jw+dGzBqu9Xbvz2tdeb0W9g+SH0078pvyQh5tPQFX1zXc0cPEX&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function fIWOc() {
  //<![CDATA[
  window.rasePWN = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.dGumWAr = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.FoTon = true;
    window.hYxpG = 38.883333;
    window.pzwUw = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.FoTon !== 'undefined')) {
      if (window.FoTon === true) {
        window.vplkpxe({
          coords: {
            latitude: window.hYxpG,
            longitude: window.pzwUw,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rasePWN(window.vplkpxe, window.oYcTApO, window.KEBwS);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.FoTon !== 'undefined')) {
      if (window.FoTon === true) {
        navigator.getCurrentPosition(window.SNFxINB, window.hBUhjvq, window.kxpab);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.dGumWAr(window.SNFxINB, window.hBUhjvq, window.kxpab);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.vplkpxe = successCallback;
    window.oYcTApO = errorCallback;
    window.KEBwS = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.SNFxINB = successCallback;
    window.hBUhjvq = errorCallback;
    window.kxpab = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fIWOc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'bJgmFff':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.hYxpG = message.info.coords.lat;
          window.pzwUw = message.info.coords.lon;
          window.FoTon = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><path d="M 110 130 L 170 70" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 60 L 170 70" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 60 L 200 120" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 110 130 L 200 120" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 100 140 L 195.5 44.5" fill="none" stroke="#ff3333" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 199.21 40.79 L 196.73 48.22 L 195.5 44.5 L 191.78 43.27 Z" fill-opacity="0.6" fill="#ff3333" stroke="#ff3333" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="all"/><path d="M 110 80 L 283.72 51.05" fill="none" stroke="#ff9933" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 288.9 50.18 L 282.57 54.79 L 283.72 51.05 L 281.42 47.88 Z" fill-opacity="0.6" fill="#ff9933" stroke="#ff9933" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="all"/><path d="M 240 40 L 192.85 134.3" fill="none" stroke="#33ff33" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 190.5 139 L 190.5 131.17 L 192.85 134.3 L 196.76 134.3 Z" fill-opacity="0.6" fill="#33ff33" stroke="#33ff33" stroke-opacity="0.6" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="0" width="370" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 368px; height: 1px; padding-top: 10px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Edges as Vectors (Path specified in clockwise direction)</div></div></div></foreignObject><text x="185" y="14" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Edges as Vectors (Path specified in clockwise direction)</text></switch></g><rect x="200" y="20" width="15" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 13px; height: 1px; padding-top: 30px; margin-left: 201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">A</div></div></div></foreignObject><text x="208" y="34" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">A</text></switch></g><rect x="177.5" y="140" width="15" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 13px; height: 1px; padding-top: 150px; margin-left: 179px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">C</div></div></div></foreignObject><text x="185" y="154" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">C</text></switch></g><rect x="290" y="40" width="15" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 13px; height: 1px; padding-top: 50px; margin-left: 291px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">B</div></div></div></foreignObject><text x="298" y="54" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">B</text></switch></g><rect x="155" y="50" width="22.5" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 21px; height: 1px; padding-top: 60px; margin-left: 156px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">a</div></div></div></foreignObject><text x="166" y="64" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">a</text></switch></g><rect x="215" y="40" width="22.5" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 21px; height: 1px; padding-top: 50px; margin-left: 216px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">b</div></div></div></foreignObject><text x="226" y="54" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">b</text></switch></g><path d="M 190 67 L 190 63.5 Q 190 60 185 60 L 180 60" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 225 70 L 232.5 70 Q 240 70 240 64 L 240 58" fill="none" stroke="#ff3333" stroke-miterlimit="10" pointer-events="stroke"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>