{"version":3,"sources":["webpack:///../src/impression.mdx"],"names":["_frontmatter","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","target","src","style","frameBorder","allow","allowFullScreen","text","isMDXComponent"],"mappings":"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","file":"component---src-impression-mdx-7396b5c988c84a072add.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/chris/visioncortex.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Figure } from './components/Figure';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"impression\"\n    }}>{`Impression`}</h1>\n    <p>{`Researcher: `}\n      <a {...{\n        \"href\": \"//github.com/tyt2y3\",\n        \"parentName\": \"p\"\n      }}>{`Chris Tsang`}</a>\n      {` | Published: 2020-12-24`}</p>\n    <hr />\n    <p>{`Impression is a family of algorithms for image simplification, segmentation and vectorization. Try the `}\n      <a href=\"//www.visioncortex.org/visionmagic/\" target=\"_blank\">{`Demo Web App`}</a>\n      {`.`}</p>\n    <iframe src=\"https://player.vimeo.com/video/491698600\" style={{\n      \"width\": \"100%\",\n      \"height\": \"95vh\",\n      \"maxHeight\": \"75vw\"\n    }} frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen />\n    <h2 {...{\n      \"id\": \"premise\"\n    }}>{`Premise`}</h2>\n    <p>{`The fundamental information result from visual perception is shape. For example, we would describe ‘there is an orange on a basket’ or more conceptually ‘there is a circle above a triangle’.`}</p>\n    <p>{`If we regard simplification as a process of information reduction, we could imagine information being taken away from an image shape by shape, starting from the least important shapes. At the same time, we can also simplify each shape in the image to make it ‘less fractal’.`}</p>\n    <p>{`By controlling this reduction process, we would be able to control the amount of visual information in an image in a quantitative manner.`}</p>\n    <p>{`Under this understanding, segmentation is an extreme degree of simplification, while vectorization is a slight degree of simplification.`}</p>\n    <h2 {...{\n      \"id\": \"the-clustering-algorithm\"\n    }}>{`The Clustering Algorithm`}</h2>\n    <p>{`The `}\n      <a {...{\n        \"href\": \"//docs.rs/visioncortex/latest/visioncortex/color_clusters\",\n        \"parentName\": \"p\"\n      }}>{`clustering algorithm`}</a>\n      {` is hierarchical in nature and the idea is best described by the following verse:`}</p>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`On an unclaimed land, there are villages. Villages ally with each other to form tribes. Tribes conquer each other and form Kingdoms. Kingdoms clashes with each other and form empires. Empires breakdown and finally the entire earth becomes one union.`}</p>\n\n    </blockquote>\n    <h3 {...{\n      \"id\": \"stage-1-clustering\"\n    }}>{`Stage 1: clustering`}</h3>\n    <p>{`Clustering is a process to connect pixels of similar colors into clusters. Each cluster have a unique position and shape. There is well known algorithm to perform clustering and Impression’s implementation is essentially same as Kopelman Algorithm.`}</p>\n    <h3 {...{\n      \"id\": \"stage-2-hierarchical-clustering\"\n    }}>{`Stage 2: hierarchical clustering`}</h3>\n    <p>{`Hierarchical clustering is a process to build an image tree from the clusters of stage 1. Impression builds a binary tree bottom up. In preparation, clusters are sorted by their size. Starting from the smallest, in each iteration, a cluster is merged into the closest cluster. There are different formulas for ‘close’, but it generally involves comparing the average colors between neighboring clusters.`}</p>\n    <h3 {...{\n      \"id\": \"stage-3-tree-walking\"\n    }}>{`Stage 3: tree walking`}</h3>\n    <p>{`In image vectorization as in `}\n      <a {...{\n        \"href\": \"/vtracer\",\n        \"parentName\": \"p\"\n      }}>{`VTracer`}</a>\n      {`, we would walk the tree from top to bottom, trace each layer, and stack the vector paths on the output canvas. As if a painter paints on an empty canvas, he would lay down background first and then overlay objects atop, and finally add on details.`}</p>\n    <h2 {...{\n      \"id\": \"simplification\"\n    }}>{`Simplification`}</h2>\n    <p>{`In image simplification, there are multiple dimensions of information which can be controlled quantitatively:`}</p>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Shape details: proportional to how many points we use to outline each shape`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Fidelity: proportional to how many nodes we retain from the image tree`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Color levels: proportional to how densely we sample the image tree layers`}</li>\n\n    </ol>\n    <h3 {...{\n      \"id\": \"shape-simplification\"\n    }}>{`Shape Simplification`}</h3>\n    <p>{`Impression currently chose the Ramer-Douglas-Peucker algorithm for shape simplification. While the original algorithm is designed for open curves, Impression adapted it for closed shapes. We cut a closed path into 4 sections, simplify each, and stitch them back together after path simplification. We choose the north most, east most, south most and west most points to cut a given path. Effectively the simplest possible shape is a diamond with four points. However in practice, it is not desirable to have shapes with sharp corners, and so we would smooth them with a 4-point scheme as described in `}\n      <a {...{\n        \"href\": \"/vtracer-docs\",\n        \"parentName\": \"p\"\n      }}>{`VTracer`}</a>\n      {`.`}</p>\n    <Figure src=\"visionmagic/simplification-shape-details.png\" text=\"Left to right: gradual reduction of shape details\" mdxType=\"Figure\" />\n    <h3 {...{\n      \"id\": \"fidelity\"\n    }}>{`Fidelity`}</h3>\n    <p>{`It has to be understood that statistically there are exponentially more nodes as we decrease the cluster size. There is one root node known as the image background, but as many leaf nodes as there are number of pixels. As such, fidelity is actually a cutoff which we discard all clusters smaller than a desired size. When this cutoff threshold is low, we are removing salt and pepper noise but in a true color sense. As we increase this cutoff, structures are being discarded. Further increasing this cutoff, the image would become more abstract, and in the end only one solid background will be left.`}</p>\n    <p>{`It is important to note that this background color is not the mean pixel color of the image, but is the average color of the largest cluster, which conceptually is the ‘base tone’ of the given image.`}</p>\n    <Figure src=\"visionmagic/simplification-fidelity.png\" text=\"Left: low fidelity; Right: high fidelity\" mdxType=\"Figure\" />\n    <h3 {...{\n      \"id\": \"color-levels\"\n    }}>{`Color Levels`}</h3>\n    <p>{`More color levels mean finer gradient. Color levels set to 256 means utilizing the full color precision of RGB888. Setting color levels to 32 meaning a cluster has to have at least a color difference of 8 in order to be considered a separate cluster with the cluster on the upper level. In effect, tuning down the color levels would create a retro 8-bit color look. While the number of colors in the palette is limited, the colors are still 24-bit and thus are faithful to the original image.`}</p>\n    <Figure src=\"visionmagic/simplification-color-levels.png\" text=\"Left: less color levels; Right: more color levels\" mdxType=\"Figure\" />\n    <h2 {...{\n      \"id\": \"segmentation\"\n    }}>{`Segmentation`}</h2>\n    <p><a {...{\n        \"href\": \"//docs.rs/visionmagic/latest/visionmagic/segmentation\",\n        \"parentName\": \"p\"\n      }}>{`Segmentation`}</a>\n      {` follows stage 3 of the algorithm. Similar clusters are grouped together by the `}\n      <a {...{\n        \"href\": \"//docs.rs/visioncortex/latest/visioncortex/disjoint_sets\",\n        \"parentName\": \"p\"\n      }}>{`disjoint sets`}</a>\n      {` algorithm, where each set of the result represents a solid color patch. For each cluster, its neighbours are being considered. If the color difference is smaller than a defined deviation, they will be put into the same union. To prevent grouping too greedily, after the first union, subsequent union would require stricter thresholds. To output segmentation result, each set would be rendered by the average color of all its constituting clusters.`}</p>\n    <p>{`After this stage, there would still be unwanted patches in the output. The output would further be re-clustered by Stage 1 to 3 described before, and an `}\n      <a {...{\n        \"href\": \"//docs.rs/visionmagic/latest/visionmagic/aggregation\",\n        \"parentName\": \"p\"\n      }}>{`aggregation`}</a>\n      {` pass be applied afterwards. It would prune away smaller patches by merging into the closest (in terms of color) cluster if deviation would allow.`}</p>\n    <p>{`Finally, to output result, each aggregate would be rendered by its original cluster color.`}</p>\n    <Figure src=\"visionmagic/segmentation-aggregation.png\" text=\"Left: original; Mid: initial segmentation; Right: after aggregation\" mdxType=\"Figure\" />\n    <h2 {...{\n      \"id\": \"the-implementation\"\n    }}>{`The Implementation`}</h2>\n    <p>{`The described algorithms are implemented as reusable components under `}\n      <a {...{\n        \"href\": \"//github.com/visioncortex/visionmagic\",\n        \"parentName\": \"p\"\n      }}>{`VisionMagic`}</a>\n      {`. Together with a processing pipeline, they are designed to support real-time and interactive applications. Users can easily organize processing stages and add additional processing passes as needed.`}</p>\n    <p>{`The `}\n      <a {...{\n        \"href\": \"//docs.rs/visionmagic/latest/visionmagic/trait.Processor.html\",\n        \"parentName\": \"p\"\n      }}><inlineCode {...{\n          \"parentName\": \"a\"\n        }}>{`Processor`}</inlineCode></a>\n      {` trait is the interface that future additions of algorithms will conform to. It also allows us to support video streaming applications in the future.`}</p>\n    <h2 {...{\n      \"id\": \"impressionism\"\n    }}>{`Impressionism`}</h2>\n    <p>{`The above methodology is designed to imitate visual perception in humans. It is thus no surprising that resulting images exhibit characteristics similar to paintings drawn by Artists. As the name suggests, it is heavy inspired by a painting technique that we called ‘Impressionism’ for the meaning it convey during a brief period of art history.`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`Simplification Parameters: Shape Details  = 27983, Fidelity = 51256, Color Levels = 16\nPhotoshop ‘Oil Paint’ filter: Stylization = 0.1, Cleanliness = 10.0, Scale = 0.1, Bristle Detail = 6.5, Light = -60, Shine = 1.0\n`}</code></pre>\n    <Figure src=\"visionmagic/visionmagic-impressionism.png\" text=\"Left: Artwork generated by Impression; Right: Water Lilies Painting by Claude Monet\" mdxType=\"Figure\" />\n    <h3 {...{\n      \"id\": \"photo-credits\"\n    }}>{`Photo Credits`}</h3>\n    <span>\n      <p>{`Building photo by `}\n        <a href=\"https://unsplash.com/@hernanlucio?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Hernan Lucio`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/gJFvHkUHdSI\">{`Unsplash`}</a></p>\n    </span>\n    <span>\n      <p>{`Dog photo by `}\n        <a href=\"https://unsplash.com/@elijah_ekdahl?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Elijah Ekdahl`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/nt69AC1bSdg\">{`Unsplash`}</a></p>\n    </span>\n    <span>\n      <p>{`Cityscape photo by `}\n        <a href=\"https://unsplash.com/@mkd_ie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Mark Denton`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/XH3_OXU3lMk\">{`Unsplash`}</a></p>\n    </span>\n    <span>\n      <p>{`Landscape photo by `}\n        <a href=\"https://unsplash.com/@lucabravo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Luca Bravo`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/zAjdgNXsMeg\">{`Unsplash`}</a></p>\n    </span>\n    <span>\n      <p>{`Parrot photo by `}\n        <a href=\"https://unsplash.com/@sanvedbangale23?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Sanved Bangale`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/oSj50kWaU6E\">{`Unsplash`}</a></p>\n    </span>\n    <span>\n      <p>{`Water lily photo by `}\n        <a href=\"https://unsplash.com/@ravinepz?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">{`Ravi Sharma`}</a>\n        {` on `}\n        <a href=\"https://unsplash.com/photos/gfP_Cz0MaFs\">{`Unsplash`}</a></p>\n    </span>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}